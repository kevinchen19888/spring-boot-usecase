spring.kafka.consumer.auto-commit-interval = 5000
spring.kafka.consumer.auto.offset.reset = earliest
spring.kafka.consumer.bootstrap.servers = [localhost:9092]
spring.kafka.consumer.check.crcs = true
#spring.kafka.consumer.client.id =
spring.kafka.consumer.connections.max.idle.ms = 540000
spring.kafka.consumer.default.api.timeout.ms = 60000
spring.kafka.consumer.enable.auto.commit = true
spring.kafka.consumer.exclude.internal.topics = true
spring.kafka.consumer.fetch.max.bytes = 52428800
spring.kafka.consumer.fetch.max.wait.ms = 500
spring.kafka.consumer.fetch.min.bytes = 1
#spring.kafka.consumer.group.id = kafka2
spring.kafka.consumer.heartbeat.interval.ms = 3000
spring.kafka.consumer.interceptor.classes = []
spring.kafka.consumer.internal.leave.group.on.close = true
spring.kafka.consumer.isolation.level = read_uncommitted
spring.kafka.consumer.key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.max.partition.fetch.bytes = 1048576
spring.kafka.consumer.max.poll.interval.ms = 300000
spring.kafka.consumer.max.poll.records = 500
spring.kafka.consumer.metadata.max.age.ms = 300000
spring.kafka.consumer.metric.reporters = []
spring.kafka.consumer.metrics.num.samples = 2
spring.kafka.consumer.metrics.recording.level = INFO
spring.kafka.consumer.metrics.sample.window.ms = 30000
spring.kafka.consumer.partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
spring.kafka.consumer.receive.buffer.bytes = 65536
spring.kafka.consumer.reconnect.backoff.max.ms = 1000
spring.kafka.consumer.reconnect.backoff.ms = 50
spring.kafka.consumer.request.timeout.ms = 30000
spring.kafka.consumer.retry.backoff.ms = 100
spring.kafka.consumer.sasl.client.callback.handler.class = null
spring.kafka.consumer.sasl.jaas.config = null
spring.kafka.consumer.sasl.kerberos.kinit.cmd = /usr/bin/kinit
spring.kafka.consumer.sasl.kerberos.min.time.before.relogin = 60000
spring.kafka.consumer.sasl.kerberos.service.name = null
spring.kafka.consumer.sasl.kerberos.ticket.renew.jitter = 0.05
spring.kafka.consumer.sasl.kerberos.ticket.renew.window.factor = 0.8
spring.kafka.consumer.sasl.login.callback.handler.class = null
spring.kafka.consumer.sasl.login.class = null
spring.kafka.consumer.sasl.login.refresh.buffer.seconds = 300
spring.kafka.consumer.sasl.login.refresh.min.period.seconds = 60
spring.kafka.consumer.sasl.login.refresh.window.factor = 0.8
spring.kafka.consumer.sasl.login.refresh.window.jitter = 0.05
spring.kafka.consumer.sasl.mechanism = GSSAPI
spring.kafka.consumer.security.protocol = PLAINTEXT
spring.kafka.consumer.send.buffer.bytes = 131072
spring.kafka.consumer.session.timeout.ms = 10000
spring.kafka.consumer.ssl.cipher.suites = null
spring.kafka.consumer.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
spring.kafka.consumer.ssl.endpoint.identification.algorithm = https
spring.kafka.consumer.ssl.key.password = null
spring.kafka.consumer.ssl.keymanager.algorithm = SunX509
spring.kafka.consumer.ssl.keystore.location = null
spring.kafka.consumer.ssl.keystore.password = null
spring.kafka.consumer.ssl.keystore.type = JKS
spring.kafka.consumer.ssl.protocol = TLS
spring.kafka.consumer.ssl.provider = null
spring.kafka.consumer.ssl.secure.random.implementation = null
spring.kafka.consumer.ssl.trustmanager.algorithm = PKIX
spring.kafka.consumer.ssl.truststore.location = null
spring.kafka.consumer.ssl.truststore.password = null
spring.kafka.consumer.ssl.truststore.type = JKS
spring.kafka.consumer.value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer